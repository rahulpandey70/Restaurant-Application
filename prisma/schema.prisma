// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id           Int       @id @default(autoincrement())
  name         String
  main_image   String
  images       String[]
  description  String
  open_time    String
  closing_time String
  slug         String    @unique
  price        PRICE
  items        Item[]
  reviews      Review[]
  bookings     Booking[]
  tables       Table[]
  location_id  Int
  location     Location  @relation(fields: [location_id], references: [id])
  region_id    Int
  region       Region    @relation(fields: [region_id], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Region {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  city       String
  email      String   @unique
  password   String
  phone      String
  reviews    Review[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Float
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Booking {
  id               Int              @id @default(autoincrement())
  number_of_people Int
  booking_time     DateTime
  booking_email    String
  booking_phone    String
  booker_firstname String
  booker_lastname  String
  booker_occession String
  booker_request   String
  restaurant_id    Int
  restaurant       Restaurant       @relation(fields: [restaurant_id], references: [id])
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  tables           BookingOnTable[]
}

model Table {
  id            Int              @id @default(autoincrement())
  seats         Int
  restaurant_id Int
  restaurant    Restaurant       @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  bookings      BookingOnTable[]
}

model BookingOnTable {
  booking_id Int
  booking    Booking  @relation(fields: [booking_id], references: [id])
  table_id   Int
  table      Table    @relation(fields: [table_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([booking_id, table_id])
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
